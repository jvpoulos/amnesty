balance.dat.r$Bandwidth <- c(rep("CCT bandwidth",11),
rep("IK bandwidth",11),
rep("CV bandwidth",11)) # all use conventional estimates with robust CIs
# Plot forest plot
suppressWarnings(balance.dat.r$x <- factor(balance.dat.r$x, levels=rev(balance.dat.r$x))) # reverse order
pdf(paste0(data.directory,"plots/rd_estimates.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x ,],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-1,0,1), labels = c("-1", "0", "1")) +
facet_grid(.~Bandwidth)
dev.off()
# pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
# ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
#                            balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
#                            balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
#            xlab="Regression discontinuity estimate",ylab="") +
#   facet_grid(.~Bandwidth)
# dev.off()
# Normalize continuous variables to 0-1
NormalizeIt <- function(x){
x[!is.na(x)] <- (x[!is.na(x)]-min(x[!is.na(x)]))/(max(x[!is.na(x)])-min(x[!is.na(x)]))
return(x)
}
vars.cont <- c("persprop.d","realprop.d","taxprop.d","overall","per.black","age")
delegates.rd[,vars.cont]<- sapply(vars.cont, function(i){
NormalizeIt(delegates.rd[,i])
})
# RD estimates for summary figures
require(ggplot2)
require(rdrobust)
#source("delegates.R") # Run delegates
#source("rd-balance.R") # Create balance plots
# Create vector for responsement variables
response.vars <- c("persprop.d","realprop.d","taxprop.d","future","protest","overall","econ","gov","misc","race","suffrage")
# Apply rdrobust over characteristics
cct.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="CCT"))
ik.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="IK"))
cv.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="CV"))
# Create data for plot
balance.dat.r <- data.frame(x = c("Change in personal property value, 1860-1870 (1860$)",
"Change in real estate value, 1860-1870 (1860$)",
"Change in taxable property value, 1860-1870 (1860$)",
"Future officeholder",
"Protested adoption of constitution",
"RSS: overall",
"RSS: economics",
"RSS: gov. structure",
"RSS: misc.",
"RSS: race",
"RSS: suffrage"),
y = c(sapply(cct.response, "[[", "coef")[2,], # CCT: bias-corrected estimates
sapply(ik.response, "[[", "coef")[1,],  # IK: conventional estimates
sapply(cv.response, "[[", "coef")[1,]), # CV: conventional estimates
y.lo = c(sapply(cct.response, "[[", "ci")[3,], # CCT: robust CIs
sapply(ik.response, "[[", "ci")[1,], # IK: conventional CIs
sapply(cv.response, "[[", "ci")[1,]), # CV: conventional CIs
y.hi = c(sapply(cct.response, "[[", "ci")[4,],
sapply(ik.response, "[[", "ci")[4,],
sapply(cv.response, "[[", "ci")[4,]),
N = c(rep(sapply(cct.response, "[[", "N"),3)))
balance.dat.r$Bandwidth <- c(rep("CCT bandwidth",11),
rep("IK bandwidth",11),
rep("CV bandwidth",11)) # all use conventional estimates with robust CIs
# Plot forest plot
suppressWarnings(balance.dat.r$x <- factor(balance.dat.r$x, levels=rev(balance.dat.r$x))) # reverse order
pdf(paste0(data.directory,"plots/rd_estimates.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x ,],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-1,0,1), labels = c("-1", "0", "1")) +
facet_grid(.~Bandwidth)
dev.off()
# pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
# ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
#                            balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
#                            balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
#            xlab="Regression discontinuity estimate",ylab="") +
#   facet_grid(.~Bandwidth)
# dev.off()
pdf(paste0(data.directory,"plots/rd_estimates.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r,
xlab="Regression discontinuity estimate",
ylab="") +
facet_grid(.~Bandwidth)
dev.off()
summary(delegates.rd)
cct.response[[1]]
summary(delegates.rd)
cct.response[[2]]
cct.response[[3]]
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
# Set data directory
data.directory <- "~/Dropbox/github/amnesty/data/"
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Create response var for protest adoption of const. (asterisk: AL,AR, VA; dagger: TX)
delegates$protest <- NA
delegates$protest[delegates$state=="AL" | delegates$state=="AR" | delegates$state=="VA" | delegates$state=="TX"] <- 0
delegates$protest[delegates$asterisk==1 & (delegates$state=="AL" | delegates$state=="AR" | delegates$state=="VA")] <-1
delegates$protest[delegates$dagger==1 & (delegates$state=="TX")] <-1
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Chain 1870 values to 1860 $
delegates$taxprop.70 <- delegates$taxprop.70/(8.06/12.65)
delegates$realprop.70 <- delegates$realprop.70/(8.06/12.65)
delegates$persprop.70 <- delegates$persprop.70/(8.06/12.65)
# Create measure of change in wealth between Censuses
delegates$taxprop.d <- delegates$taxprop.70-delegates$taxprop.60
delegates$realprop.d <- delegates$realprop.70 - delegates$realprop.60
delegates$persprop.d <- delegates$persprop.70 - delegates$persprop.60
# Create former/future office dummies
delegates$former <- ifelse(delegates$former.office=="",0,1)
delegates$future <- ifelse(delegates$future.office=="",0,1)
# Create profession dummies
delegates$profession<- trimws(delegates$profession)
delegates$profession[delegates$profession=="Commission merchant" |
delegates$profession=="Commission"|
delegates$profession=="Clothing merchant"|
delegates$profession=="Flour merchant"|
delegates$profession=="Grocer- merchant"|
delegates$profession=="Grocery merchant"|
delegates$profession=="Retail merchant"|
delegates$profession=="Retired merchant"|
delegates$profession=="Dry goods merchant"|
delegates$profession=="Cotton broker"|
delegates$profession=="Cotton dealer"|
delegates$profession=="Dry goods merchant"|
delegates$profession=="Hide and wool dealer"] <- "Merchant"
delegates$profession[delegates$profession=="Baptist minister" |
delegates$profession=="M.E. minister"|
delegates$profession=="Methodist minister"|
delegates$profession=="Presbyterian minister"] <- "Minister"
delegates$profession[delegates$profession=="Planter" |
delegates$profession=="Rancher"] <- "Farmer"
delegates$profession[delegates$profession=="Circuit ct. judge" |
delegates$profession=="Circuit ct. judge in 1868"|
delegates$profession=="Clerk"|
delegates$profession=="Court clerk"|
delegates$profession=="Judge of ordinary"|
delegates$profession=="Justice of peace"|
delegates$profession=="Justice of peace in 1850s"|
delegates$profession=="Law student"|
delegates$profession=="Police judge, 1870"|
delegates$profession=="U.S. marshal"|
delegates$profession=="Inspector of naval stores"|
delegates$profession=="Mayor of Augusta"|
delegates$profession=="Mayor of Corinth"|
delegates$profession=="Notary public"|
delegates$profession=="Postmaster of Key West"|
delegates$profession=="County treasurer, 1870"|
delegates$profession=="Customs house official"|
delegates$profession=="Customs house official house official"|
delegates$profession=="Customs collector"|
delegates$profession=="Registrar of bankruptcy"] <- "Law/Government Professional"
delegates$farmer <-ifelse(delegates$profession == "Farmer",1,0)
delegates$lawyer <-ifelse(delegates$profession == "Lawyer"|
delegates$profession == "Law/Government Professional",1,0) # lawyer/law Professional
delegates$merchant <-ifelse(delegates$profession == "Merchant",1,0)
delegates$physician <-ifelse(delegates$profession == "Physician"|
delegates$profession == "Dentist"|
delegates$profession == "Druggist",1,0) #physician/dentist/druggist
delegates$minister <-ifelse(delegates$profession == "Minister",1,0)
# Create bio dummies
unionist <- c(grep("Union",delegates$bio,T), grep("loyal",delegates$bio,T),
grep("Anti-secessionist",delegates$bio,T),grep("Unionist",delegates$bio,T),
grep("Freedmen's Bureau",delegates$bio,T),
grep("Peace advocate",delegates$bio,T), grep("carpetbagger",delegates$bio,T),
grep("opponent of secession",delegates$bio,T),
grep("ariti-secessionist",delegates$bio,T),
grep("Pro-North",delegates$bio,T), grep("antipsecessionist",delegates$bio,T),
grep("red string",delegates$bio,T), grep("Republican",delegates$bio,T),
grep("Union",delegates$bio,T)) #unionist/union veteran/Republican/claimed loyalty during war
dem <- c(grep("Whig",delegates$bio,T), grep("Democrat",delegates$bio,T),
grep("Democratic",delegates$bio,T),grep("pro-Douglas",delegates$bio,T),
grep("Douglas",delegates$bio,T)) # former whig/Democrat
confederate <- c(grep("Confederate veteran",delegates$bio,T),
grep("Confederate captain",delegates$bio,T),grep("Confederate colonel",delegates$bio,T),
grep("Confederate officer",delegates$bio,T), grep("Confederate surgeon",delegates$bio,T),
grep("pro-secession",delegates$bio,T), grep("favored secession",delegates$bio,T),
grep("Confederate cavalry",delegates$bio,T),
grep("Confederate lieutenant",delegates$bio,T), grep("Confederate It. colonel",delegates$bio,T),
grep("Confederate it. colonel",delegates$bio,T), grep("Confederate major",delegates$bio,T),
grep("Confederate veterao",delegates$bio,T),
grep("served in Confederate",delegates$bio,T)) # confederate/secessionist
delegates$unionist <- 0
delegates$unionist[rownames(delegates) %in% unionist] <- 1
delegates$dem <- 0
delegates$dem[rownames(delegates) %in% dem] <- 1
delegates$confederate <- 0
delegates$confederate[rownames(delegates) %in% confederate] <- 1
# Create dummy for always-takers (Preliminary - need applications data)
delegates$always <- ifelse(delegates$state=="AR" | delegates$state=="MS" | delegates$state=="NC" | delegates$state=="SC" | delegates$state=="FL",1,0)
# Merge delegates with votes
delegates$did <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state", "sound.first","sound.surname")],
votes[c("first.name", "surname", "state", "sound.first","sound.surname")])
#min.train <- getMinimalTrain(r.pairs,nEx=10)
#min.train <- editMatch(min.train)
#saveRDS(min.train, paste0(data.directory,"min_train_delegates.rds"))
min.train <- readRDS(paste0(data.directory,"min_train_delegates.rds"))
model <- trainSupv(min.train, method = "svm")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
links <- links[!duplicated(links$id1),] # remove duplicates
delegates <- merge(delegates, links, by.x="did",by.y="id1", all.x=TRUE)
delegates <- merge(delegates, votes, by.x="id2",by.y="vid", all.x=TRUE)
colnames(delegates)[1] <- "vid"
# Subset data to nonmissing taxable property values
delegates.rd <- subset(delegates, !is.na(taxprop.60))
# Normalize continuous variables to 0-1
NormalizeIt <- function(x){
x[!is.na(x)] <- (x[!is.na(x)]-min(x[!is.na(x)]))/(max(x[!is.na(x)])-min(x[!is.na(x)]))
return(x)
}
vars.cont <- c("overall","per.black","age")
delegates.rd[,vars.cont]<- sapply(vars.cont, function(i){
NormalizeIt(delegates.rd[,i])
})
# RD estimates for summary figures
require(ggplot2)
require(rdrobust)
#source("delegates.R") # Run delegates
#source("rd-balance.R") # Create balance plots
# Create vector for responsement variables
response.vars <- c("persprop.d","realprop.d","taxprop.d","future","protest","overall","econ","gov","misc","race","suffrage")
# Apply rdrobust over characteristics
cct.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="CCT"))
ik.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="IK"))
cv.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
bwselect="CV"))
# Create data for plot
balance.dat.r <- data.frame(x = c("Change in personal property value, 1860-1870 (1860$)",
"Change in real estate value, 1860-1870 (1860$)",
"Change in taxable property value, 1860-1870 (1860$)",
"Future officeholder",
"Protested adoption of constitution",
"RSS: overall",
"RSS: economics",
"RSS: gov. structure",
"RSS: misc.",
"RSS: race",
"RSS: suffrage"),
y = c(sapply(cct.response, "[[", "coef")[2,], # CCT: bias-corrected estimates
sapply(ik.response, "[[", "coef")[1,],  # IK: conventional estimates
sapply(cv.response, "[[", "coef")[1,]), # CV: conventional estimates
y.lo = c(sapply(cct.response, "[[", "ci")[3,], # CCT: robust CIs
sapply(ik.response, "[[", "ci")[1,], # IK: conventional CIs
sapply(cv.response, "[[", "ci")[1,]), # CV: conventional CIs
y.hi = c(sapply(cct.response, "[[", "ci")[4,],
sapply(ik.response, "[[", "ci")[4,],
sapply(cv.response, "[[", "ci")[4,]),
N = c(rep(sapply(cct.response, "[[", "N"),3)))
balance.dat.r$Bandwidth <- c(rep("CCT bandwidth",11),
rep("IK bandwidth",11),
rep("CV bandwidth",11)) # all use conventional estimates with robust CIs
# Plot forest plot
suppressWarnings(balance.dat.r$x <- factor(balance.dat.r$x, levels=rev(balance.dat.r$x))) # reverse order
pdf(paste0(data.directory,"plots/rd_estimates_bin.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x != "Change in real estate value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in personal property value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-1,0,1), labels = c("-1", "0", "1")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
scale_y_continuous(breaks = c(-2000,0,2000), labels = c("-2,000", "0", "2,000")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-2000,0,2000), labels = c("-2,000", "0", "2,000")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
scale_y_continuous(breaks = c(-20000,0,20000), labels = c("-20,000", "0", "20,000")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
#  scale_y_continuous(breaks = c(-20000,0,20000), labels = c("-20,000", "0", "20,000")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
scale_y_continuous(breaks = c(-10000,0,20000), labels = c("-10,000", "0", "20,000")) +
facet_grid(.~Bandwidth)
dev.off()
source("delegates.R") # Run delegates
summary(delegates.rd$comply)
# RD estimates for summary figures
require(ggplot2)
require(rdrobust)
#source("delegates.R") # Run delegates
#source("rd-balance.R") # Create balance plots
# Create vector for responsement variables
response.vars <- c("persprop.d","realprop.d","taxprop.d","future","protest","overall","econ","gov","misc","race","suffrage")
# Apply rdrobust over characteristics
cct.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$comply,
bwselect="CCT"))
ik.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$comply,
bwselect="IK"))
cv.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$comply,
bwselect="CV"))
# Create data for plot
balance.dat.r <- data.frame(x = c("Change in personal property value, 1860-1870 (1860$)",
"Change in real estate value, 1860-1870 (1860$)",
"Change in taxable property value, 1860-1870 (1860$)",
"Future officeholder",
"Protested adoption of constitution",
"RSS: overall",
"RSS: economics",
"RSS: gov. structure",
"RSS: misc.",
"RSS: race",
"RSS: suffrage"),
y = c(sapply(cct.response, "[[", "coef")[2,], # CCT: bias-corrected estimates
sapply(ik.response, "[[", "coef")[1,],  # IK: conventional estimates
sapply(cv.response, "[[", "coef")[1,]), # CV: conventional estimates
y.lo = c(sapply(cct.response, "[[", "ci")[3,], # CCT: robust CIs
sapply(ik.response, "[[", "ci")[1,], # IK: conventional CIs
sapply(cv.response, "[[", "ci")[1,]), # CV: conventional CIs
y.hi = c(sapply(cct.response, "[[", "ci")[4,],
sapply(ik.response, "[[", "ci")[4,],
sapply(cv.response, "[[", "ci")[4,]),
N = c(rep(sapply(cct.response, "[[", "N"),3)))
balance.dat.r$Bandwidth <- c(rep("CCT bandwidth",11),
rep("IK bandwidth",11),
rep("CV bandwidth",11)) # all use conventional estimates with robust CIs
# Plot forest plot
suppressWarnings(balance.dat.r$x <- factor(balance.dat.r$x, levels=rev(balance.dat.r$x))) # reverse order
pdf(paste0(data.directory,"plots/rd_estimates_bin.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x != "Change in real estate value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in personal property value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-1,0,1), labels = c("-1", "0", "1")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
scale_y_continuous(breaks = c(-10000,0,20000), labels = c("-10,000", "0", "20,000")) +
facet_grid(.~Bandwidth)
dev.off()
cct.response[[1]]
cct.response[[2]]
cct.response[[3]]
source("delegates.R") # Run delegates
summary(delegates$always)
# RD estimates for summary figures
require(ggplot2)
require(rdrobust)
#source("delegates.R") # Run delegates
#source("rd-balance.R") # Create balance plots
# Create vector for responsement variables
response.vars <- c("persprop.d","realprop.d","taxprop.d","future","protest","overall","econ","gov","misc","race","suffrage")
# Apply rdrobust over characteristics
cct.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$always,
bwselect="CCT"))
ik.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$always,
bwselect="IK"))
cv.response <- lapply(response.vars, function(i) rdrobust(delegates.rd[,i],
delegates.rd$taxprop.60,
c=cutoff,
all=TRUE,
fuzzy=delegates.rd$always,
bwselect="CV"))
# Create data for plot
balance.dat.r <- data.frame(x = c("Change in personal property value, 1860-1870 (1860$)",
"Change in real estate value, 1860-1870 (1860$)",
"Change in taxable property value, 1860-1870 (1860$)",
"Future officeholder",
"Protested adoption of constitution",
"RSS: overall",
"RSS: economics",
"RSS: gov. structure",
"RSS: misc.",
"RSS: race",
"RSS: suffrage"),
y = c(sapply(cct.response, "[[", "coef")[2,], # CCT: bias-corrected estimates
sapply(ik.response, "[[", "coef")[1,],  # IK: conventional estimates
sapply(cv.response, "[[", "coef")[1,]), # CV: conventional estimates
y.lo = c(sapply(cct.response, "[[", "ci")[3,], # CCT: robust CIs
sapply(ik.response, "[[", "ci")[1,], # IK: conventional CIs
sapply(cv.response, "[[", "ci")[1,]), # CV: conventional CIs
y.hi = c(sapply(cct.response, "[[", "ci")[4,],
sapply(ik.response, "[[", "ci")[4,],
sapply(cv.response, "[[", "ci")[4,]),
N = c(rep(sapply(cct.response, "[[", "N"),3)))
balance.dat.r$Bandwidth <- c(rep("CCT bandwidth",11),
rep("IK bandwidth",11),
rep("CV bandwidth",11)) # all use conventional estimates with robust CIs
# Plot forest plot
suppressWarnings(balance.dat.r$x <- factor(balance.dat.r$x, levels=rev(balance.dat.r$x))) # reverse order
pdf(paste0(data.directory,"plots/rd_estimates_bin.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x != "Change in real estate value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in personal property value, 1860-1870 (1860$)" &
balance.dat.r$x != "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
# scale_y_continuous(breaks = c(-1,0,1), labels = c("-1", "0", "1")) +
facet_grid(.~Bandwidth)
dev.off()
pdf(paste0(data.directory,"plots/rd_estimates_wealth.pdf"), width=11.69, height=8.27)
ForestPlot(balance.dat.r[balance.dat.r$x == "Change in real estate value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in personal property value, 1860-1870 (1860$)" |
balance.dat.r$x == "Change in taxable property value, 1860-1870 (1860$)",],
xlab="Regression discontinuity estimate",ylab="") +
scale_y_continuous(breaks = c(-10000,0,20000), labels = c("-10,000", "0", "20,000")) +
facet_grid(.~Bandwidth)
dev.off()
