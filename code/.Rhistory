votes[,var] <- as.numeric(votes[,var])
}
# Restrict to southern whites
votes$bloc <- gsub("0. White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.Wbite", "Outside White", votes$bloc)
votes$bloc <- gsub("s. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S.White", "Southern White", votes$bloc)
votes$bloc[votes$bloc==""] <- NA
# Combine and clean delegate vote scores
require(doParallel)
require(data.table)
require(RecordLinkage)
# Register cores for parallel processing
registerDoParallel(4)
# Ensure random number generation for parallel processing
RNGkind("L'Ecuyer-CMRG")
# Set location of files
vote.directory <- paste0(data.directory, "votes/", sep="")
# Import vote files and append data row-wise
vote.files <- c("AL-votes.csv","AR-votes.csv", "GA-votes.csv", "LA-votes.csv", "MS-votes.csv", "NC-votes.csv", "TX-votes.csv", "VA-votes.csv")
ImportData <- function(directory,files) {
data <- foreach(i = files, .combine = rbind) %dopar%{
cbind(read.csv(paste0(directory,i)))
}
return(data)
}
votes <- ImportData(vote.directory,vote.files)
# Split name
names.votes <- colsplit(votes$name,",",c("surname","first.name"))
votes$surname <- trimws(names.votes$surname)
votes$first.name <- trimws(names.votes$first.name)
votes$sound.first <- soundex(votes$first.name) # soundex of first name
# Make vote scores numeric
vote.vars <- c("gov","suffrage", "race",  "misc", "overall")
for(var in vote.vars){
votes[,var] <- gsub("[^[:alnum:].]", "", votes[,var])
votes[,var] <- as.numeric(votes[,var])
}
# Restrict to southern whites
votes$bloc <- gsub("0. White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.Wbite", "Outside White", votes$bloc)
votes$bloc <- gsub("s. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S.White", "Southern White", votes$bloc)
#votes$bloc[votes$bloc==""] <- NA
votes <- subset(votes, bloc=="Southern White")
# Combine and clean delegate vote scores
require(doParallel)
require(data.table)
require(RecordLinkage)
# Register cores for parallel processing
registerDoParallel(4)
# Ensure random number generation for parallel processing
RNGkind("L'Ecuyer-CMRG")
# Set location of files
vote.directory <- paste0(data.directory, "votes/", sep="")
# Import vote files and append data row-wise
vote.files <- c("AL-votes.csv","AR-votes.csv", "GA-votes.csv", "LA-votes.csv", "MS-votes.csv", "NC-votes.csv", "TX-votes.csv", "VA-votes.csv")
ImportData <- function(directory,files) {
data <- foreach(i = files, .combine = rbind) %dopar%{
cbind(read.csv(paste0(directory,i)))
}
return(data)
}
votes <- ImportData(vote.directory,vote.files)
# Split name
names.votes <- colsplit(votes$name,",",c("surname","first.name"))
votes$surname <- trimws(names.votes$surname)
votes$first.name <- trimws(names.votes$first.name)
votes$sound.first <- soundex(votes$first.name) # soundex of first name
# Make vote scores numeric
vote.vars <- c("gov","suffrage", "race",  "misc", "overall")
for(var in vote.vars){
votes[,var] <- gsub("[^[:alnum:].]", "", votes[,var])
votes[,var] <- as.numeric(votes[,var])
}
# Restrict to southern whites
votes$bloc <- gsub("0. White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.White", "Outside White", votes$bloc)
votes$bloc <- gsub("O.Wbite", "Outside White", votes$bloc)
votes$bloc <- gsub("s. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S. White", "Southern White", votes$bloc)
votes$bloc <- gsub("S.White", "Southern White", votes$bloc)
votes$bloc[votes$bloc==""] <- NA
votes$bloc
votes$bloc <- as.factor(votes$bloc)
summary(votes$bloc)
subset(votes, bloc=="Southern White")
summary(votes$bloc)
grep("Southern White",votes$bloc)
votes[grep("Southern White",votes$bloc),]
votes <- votes[grep("Southern White",votes$bloc),]
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$id <- 1:nrow(delegates) # create unique delegate identifier
foo <- merge(delegates, votes, by= c("surname","state","sound.first"))
sum(duplicated(foo$id))
View(foo)
delegates[!delegates$id %in% foo$id,]
View(votes)
?compare.linkage
View(votes)
delegates[c("first.name", "surname", "state")]
rpairs <- compare.linkage(delegates[c("first.name", "surname", "state")],votes[c("first.name", "surname", "state")])
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$did <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
rpairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")],
identity1=delegates["did"],
identity2=delegates["vid"],
strcmp=TRUE,
strcmpfun=jarowinkler)
rpairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")],
identity1=delegates["did"],
identity2=votes["vid"],
strcmp=TRUE,
strcmpfun=jarowinkler)
delegates["did"]
nrow(delegates["did"])
rpairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")],
identity1=delegates$did,
identity2=votes$vid,
strcmp=TRUE,
strcmpfun=jarowinkler)
rpairs
minTrain <- getMinimalTrain(rpairs)
minTrain <- editMatch(minTrain)
?getMinimalTrain
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")],
identity1=delegates$did,
identity2=votes$vid
min.train <- getMinimalTrain(r.pairs)
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")],
identity1=delegates$did,
identity2=votes$vid)
min.train <- getMinimalTrain(r.pairs)
min.train <- editMatch(min.train)
?trainSupv
model <- trainSupv(min.train, method = "svm")
?classifySupv
result <- classifySupv(model, newdata = r.pairs)
summary(result)
?getMinimalTrain
result$prediction
r.pairs["pairs"]
r.pairs$pairs
resut$prediction
result$prediction
summary(result)
result$pairs$is_match
result$pairs[result$pairs$is_match==1,]
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")])
min.train <- getMinimalTrain(r.pairs)
min.train <- editMatch(min.train)
model <- trainSupv(min.train, method = "svm")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
?getMinimalTrain
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state")],
votes[c("first.name", "surname", "state")])
min.train <- getMinimalTrain(r.pairs,nEx=1)
min.train <- getMinimalTrain(r.pairs,nEx=5)
min.train <- editMatch(min.train)
model <- trainSupv(min.train, method = "svm")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
model <- trainSupv(min.train, method = "nnet")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
result$pairs[result$pairs$is_match==1,]
summary(result)
model <- trainSupv(min.train, method = "bagging")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
compare.linkage
?compare.linkage
foo <- merge(delegates, votes, by= c("surname","state","sound.first"))
View(foo)
sum(duplicated(foo$did))
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state", "sound.first")],
votes[c("first.name", "surname", "state", "sound.first")])
min.train <- getMinimalTrain(r.pairs,nEx=10)
min.train <- editMatch(min.train)
model <- trainSupv(min.train, method = "svm")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
?compare.linkage
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$did <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state", "sound.first","sound.surname")],
votes[c("first.name", "surname", "state", "sound.first","sound.surname")],
identity1=delegates$did,
identity2=votes$vid
exclude=c("did","vid"))
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state", "sound.first","sound.surname")],
votes[c("first.name", "surname", "state", "sound.first","sound.surname")],
identity1=delegates$did,
identity2=votes$vid,
exclude=c("did","vid"))
r.pairs <- compare.linkage(delegates[c("first.name", "surname", "state", "sound.first","sound.surname")],
votes[c("first.name", "surname", "state", "sound.first","sound.surname")])
min.train <- getMinimalTrain(r.pairs,nEx=5)
min.train <- editMatch(min.train)
model <- trainSupv(min.train, method = "svm")
result <- classifySupv(model, newdata = r.pairs)
summary(result)
colnames(votes)
result$pairs[result$prediction=="L",]
View(delegates)
View(votes)
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
link
links
delegates <- merge(delegates, links, by.x=id1, all.x=TRUE)
delegates <- merge(delegates, links, by.x="did",by.y="id1", all.x=TRUE)
sum(duplicated(links$id1))
duplicated(links$id1)
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$id <- 1:nrow(delegates) # create unique delegate identifier
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
links <- links[!duplicated(links$id1),] # remove duplicates
delegates <- merge(delegates, links, by.x="id",by.y="id1", all.x=TRUE)
View(delegates)
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$id <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
links <- links[!duplicated(links$id1),] # remove duplicates
delegates <- merge(delegates, links, by.x="did",by.y="id1", all.x=TRUE)
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$did <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
links <- links[!duplicated(links$id1),] # remove duplicates
delegates <- merge(delegates, links, by.x="did",by.y="id1", all.x=TRUE)
View(delegates)
delegates <- merge(delegates, votes, by.x="id2",by.y="vid", all.x=TRUE)
View(delegates)
delegates <- delegates[-c("id1","id2")] # remove link ids
delegates <- subset(delegates, select=-c("id1","id2")) # remove link ids
colnames(delegates)
delegates <- subset(delegates, select=-c("id2")) # re
delegates <- subset(delegates, select=-c(id2)) # r
colnames(delegates)
# Clean and merge southern white delegates with vote scores
require(reshape2)
require(RecordLinkage)
source("votes.R")
# Import southern white delegates
delegates <- read.csv(paste0(data.directory,"southern-white-delegates.csv"),header=TRUE, sep = ",")
# Remove empty lines
delegates <- subset(delegates, !name=="")
# Create dummies for footnotes / clean footnotes
delegates$asterisk <- 0
delegates$asterisk[grep("[*]", delegates$name)] <- 1
delegates$dagger <- 0
delegates$dagger[grep("[+]", delegates$name)] <- 1
delegates$d.dagger <- 0
delegates$d.dagger[grep("[&]", delegates$name)] <- 1
delegates$name <- gsub("[^[:alnum:],. ]", "", delegates$name) # remove footnotes
delegates$name <- trimws(delegates$name) # trim name
# Split name
names.delegates <- colsplit(delegates$name,",",c("surname","first.name"))
delegates$surname <- trimws(names.delegates$surname)
delegates$first.name <- trimws(names.delegates$first.name)
delegates$sound.first <- soundex(delegates$first.name) # soundex of first name
delegates$sound.surname <- soundex(delegates$surname) # soundex of surname
# Make missing age NA
delegates$age[delegates$age==""] <- NA
# Make property values numeric
prop.vars <- c("realprop.60", "persprop.60", "realprop.70", "persprop.70")
for(var in prop.vars){
delegates[,var] <- gsub("[^[:alnum:]]", "", delegates[,var])
delegates[,var] <- as.numeric(delegates[,var])
}
# Make died binary
delegates$died[is.na(delegates$died)] <- 0
# Create taxable property variable
delegates$taxprop.60 <- delegates$realprop.60 + delegates$persprop.60
delegates$taxprop.70 <- delegates$realprop.70 + delegates$persprop.70
# Merge delegates with votes
delegates$did <- 1:nrow(delegates) # create unique delegate identifier
votes$vid <- 1:nrow(votes) # create unique votes identifier
links <- result$pairs[result$prediction=="L",][c("id1","id2")]
links <- links[!duplicated(links$id1),] # remove duplicates
delegates <- merge(delegates, links, by.x="did",by.y="id1", all.x=TRUE)
delegates <- merge(delegates, votes, by.x="id2",by.y="vid", all.x=TRUE)
colnames(trSamp)[1] <- "vid"
colnames(delegates)
colnames(delegates)[1] <- "vid"
colnames(delegates)
View(delegates)
